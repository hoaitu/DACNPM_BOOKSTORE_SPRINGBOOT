package com.ht.service;

//public class UserDetailsService {

import java.util.ArrayList;
import java.util.List;
//

import com.ht.dao.AppRoleDAO;
import com.ht.dao.AppUserDAO;
import com.ht.entities.User;
//import org.o7planning.sbsecurity.dao.AppUserDAO;
//import org.o7planning.sbsecurity.entity.AppUser;
//import org.o7planning.sbsecurity.dao.AppRoleDAO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
//import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
//import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.ht.repository.UserRepository;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {

	@Autowired
	private AppUserDAO appUserDAO;
//
	@Autowired
	private AppRoleDAO appRoleDAO;

	@Autowired
	private UserRepository userRepository;

//	@Override
//	public UserDetails loadUserByUsername(String userName) throws UsernameNotFoundException {
//		User appUser = this.appUserDAO.findUserAccount(userName);
//
//		if (appUser == null) {
//			System.out.println("User not found! " + userName);
//			throw new UsernameNotFoundException("User " + userName + " was not found in the database");
//		}
//
//		System.out.println("Found User: " + appUser);
//
//		boolean enabled = true;
//		boolean accountNonExpired = true;
//		boolean credentialsNonExpired = true;
//		boolean accountNonLocked = true;

	// [ROLE_USER, ROLE_ADMIN,..]
//		List<String> roleNames = this.appRoleDAO.getRoleNames(appUser.getIdUser());
//
//		List<GrantedAuthority> grantList = new ArrayList<GrantedAuthority>();
//		if (roleNames != null) {
//			for (String role : roleNames) {
//				// ROLE_USER, ROLE_ADMIN,..
//				GrantedAuthority authority = new SimpleGrantedAuthority(role);
//				grantList.add(authority);
//			}
//		}

//		UserDetails userDetails = (UserDetails) new User(appUser.getUsername(), //
//				appUser.getPassword(), grantList);

//		UserDetails userDetails = (UserDetails) new User(appUser.getUsername());

//		return userDetails;

	////////////////////////////////////////////////////////

	public UserDetails loadUserByUsername(final String username) throws UsernameNotFoundException {
		User user = userRepository.findByUsername(username);
		if (user == null) {
			return null;
		}
		boolean enabled = true;
		boolean accountNonExpired = true;
		boolean credentialsNonExpired = true;
		boolean accountNonLocked = true;
		return new User(username, user.getPassword(), enabled, accountNonExpired, credentialsNonExpired,
				accountNonLocked, user.getAuthorities());
	}
}

//}}